/* Copyright 2011-2012 SpringSource.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.cloudfoundry.client.lib.CloudApplication
import org.cloudfoundry.client.lib.ServiceConfiguration
import org.cloudfoundry.client.lib.CloudApplication.AppState

/**
 * @author Burt Beckwith
 */

includeTargets << new File("$cloudFoundryPluginDir/scripts/CfRestart.groovy")

USAGE = '''
grails cf-create-service <vendor> [name] [--bind]
'''

target(cfCreateService: '''Create a service instance.
The name will be autogenerated if not specified.
If an application name is specified with the --bind parameter then the service will be bound to it''') {

	depends cfInit

	doWithTryCatch {
		String vendor = getRequiredArg()
		List<ServiceConfiguration> configurations = client.getServiceConfigurations()
		List<String> availableTypes = configurations*.vendor
		ServiceConfiguration selection = configurations.find { it.vendor == vendor }
		if (!selection) {
			if (availableTypes) {
				errorAndDie "Vendor must be one of: $availableTypes"
			}
			else {
				errorAndDie 'No selectable services at this time'
			}
		}

		println ''
		String serviceName = createService(selection, validateStringValue(argsList[1]))
		println ''

		def bindAppName = validateString('bind')
		if (bindAppName instanceof Boolean) {
			bindAppName = getAppName()
		}
		if (bindAppName) {
			println "Creating new service binding to '$serviceName' for '$bindAppName'."
			CloudApplication application = getApplication(bindAppName)
			client.bindService bindAppName, serviceName

			println "Application '$bindAppName' updated."
			if (application.state == AppState.STARTED) {
				argsMap.appname = bindAppName
				cfRestart()
			}
		}
	}
}

setDefaultTarget cfCreateService
