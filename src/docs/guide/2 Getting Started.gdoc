h4. The first step is to install the plugin.

Ideally, add the plugin dependency into @BuildConfig.groovy@. It is important that the plugin is scoped as @compile@, otherwise you may get some unexpected problems if you are letting the plugin manage your datasource config:

{code}
plugins {
   compile ':cloud-foundry:1.2.3'
}
{code}

Alternately you can use the install-plugin command in grails:

{code}
grails install-plugin cloud-foundry
{code}

Add a repository into @BuildConfig.groovy@ to resolve a few plugin dependencies:

{code}
repositories {
   mavenRepo 'http://maven.springframework.org/milestone/'
}
{code}

Add your Cloud Foundry credentials to @grails-app/conf/Config.groovy@, or an external config file referenced from @Config.groovy@, or in @$HOME/.grails/settings.groovy@:

{code}
grails.plugin.cloudfoundry.username = 'your.email@server.com'
grails.plugin.cloudfoundry.password = 's3kr3t'
{code}

If you want to deploy with a different application name than your Grails application name, specify it with the @grails.plugin.cloudfoundry.appname@ property:

{code}
grails.plugin.cloudfoundry.appname = 'my-cool-app'
{code}

{warning}
If you're using the spring-security-core and/or the resources plugins, be sure to use a recent version (1.2.7+ for spring-security-core and 1.1.6+ for resources) and add an explicit dependency for the webxml plugin to BuildConfig.groovy to ensure that your application deploys correctly:
{code}
compile ':webxml:1.4.1'
{code}
{warning}

There are other configuration options, but next you'll want to provision some services and deploy your application. See section [4 Deploying applications|guide:4 Deploying applications] for details on that.
